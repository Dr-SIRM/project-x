@app.route('/api/login', methods=['POST'])
def login_react():
    email = request.json.get('email')
    password = request.json.get('password')

    user = User.query.filter_by(email=email).first()
    if not user or not check_password_hash(user.password, password):
        return jsonify({'error': 'Invalid email or password'}), 401

    # Generate the JWT token
    additional_claims = {"user_id": user.id}
    session_token = create_access_token(identity=email, additional_claims=additional_claims)

    # Return the session token
    response = make_response(jsonify({'session_token': session_token}))
    response.set_cookie('session_token', session_token, httponly=True)

    # Save User Data and token
    response = {
        'session_token': session_token,
        'user': {
            'id': user.id,
            'email': user.email,
            'company_id': user.company_id,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'employment': user.employment,
            'email': user.email,
            'employment_level': user.employment_level,
            'company_name': user.company_name,
            'department': user.department,
            'access_level': user.access_level
        }
    }
    print(respone)
    return jsonify(response)



import { useState, useEffect, useContext } from "react";
import { Route, Routes, useLocation, Navigate } from "react-router-dom";
import { createBrowserHistory } from "history";
import AuthProvider from "./AuthContext";
import PrivateRoute from "./PrivateRoute";
import Topbar from "./scenes/global/Topbar";
import Sidebar from "./scenes/global/Sidebar";
import Login from "./scenes/login";
import Dashboard from "./scenes/dashboard";
import Team from "./scenes/team";
import Update from "./scenes/update";
import Availability from "./scenes/availability";
import Invite from "./scenes/invite";
import Invoices from "./scenes/invoices";
import Contacts from "./scenes/contacts";
import Company from "./scenes/company";
import Bar from "./scenes/bar";
import Form from "./scenes/form";
import Line from "./scenes/line";
import Pie from "./scenes/pie";
import FAQ from "./scenes/faq";
import Plan from "./scenes/plan";
import Geography from "./scenes/geography";
import { CssBaseline, ThemeProvider } from "@mui/material";
import { ColorModeContext, useMode } from "./theme";
import Calendar from "./scenes/calendar";
import axios from "axios";
import { AuthContext } from "./AuthContext";

function App() {
  const [theme, colorMode] = useMode();
  const [isSidebar, setIsSidebar] = useState(true);
  const [users, setUsers] = useState([]);
  const [message, setMessage] = useState("");
  const location = useLocation();
  // const isAuthenticated = location.pathname !== "/"; // Check if the user is authenticated

  // Check if the user is authenticated
  const authContext = useContext(AuthContext);
  const isAuthenticated = !!authContext.user;

  useEffect(() => {
    fetchData();
  }, []);

  // Data fetch for User-Display in Team.jsx
  async function fetchData() {
    try {
      const response = await axios.get("http://localhost:5000/api/users");
      const data = response.data;
      setUsers(data);
    } catch (error) {
      console.error("Error fetching data:", error.response ? error.response : error);
      setMessage("An error occurred while fetching data.");
    }
  }

  const history = createBrowserHistory();

  return (
    <AuthProvider>
      <ColorModeContext.Provider value={colorMode}>
        <ThemeProvider theme={theme}>
          <CssBaseline />
          <div className="app">
            {isAuthenticated && isSidebar && <Sidebar />}
            <main className="content">
              {isAuthenticated && <Topbar />}

              <Routes>
                <Route path="/" element={<Login />} />
                <Route path="/login" element={<Login />} />
                <Route
                  path="/dashboard"
                  element={
                    <PrivateRoute>
                      <Dashboard />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/team"
                  element={
                    <PrivateRoute>
                      <Team users={users} />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/contacts"
                  element={
                    <PrivateRoute>
                      <Contacts />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/invoices"
                  element={
                    <PrivateRoute>
                      <Invoices />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/form"
                  element={
                    <PrivateRoute>
                      <Form />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/bar"
                  element={
                    <PrivateRoute>
                      <Bar />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/pie"
                  element={
                    <PrivateRoute>
                      <Pie />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/line"
                  element={
                    <PrivateRoute>
                      <Line />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/faq"
                  element={
                    <PrivateRoute>
                      <FAQ />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/calendar"
                  element={
                    <PrivateRoute>
                      <Calendar />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/availability"
                  element={
                    <PrivateRoute>
                      <Availability />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/geography"
                  element={
                    <PrivateRoute>
                      <Geography />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/invite"
                  element={
                    <PrivateRoute>
                      <Invite />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/update"
                  element={
                    <PrivateRoute>
                      <Update />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/company"
                  element={
                    <PrivateRoute>
                      <Company />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/plan"
                  element={
                    <PrivateRoute>
                      <Plan />
                    </PrivateRoute>
                  }
                />
              </Routes>
            </main>
          </div>
        </ThemeProvider>
      </ColorModeContext.Provider>
    </AuthProvider>
  );
}

export default App;


import React, { useContext, useState } from 'react';
import { Box, Typography, TextField, Button, Alert, useTheme } from '@mui/material';
import axios from 'axios';
import Header from "../../components/Header";
import { useNavigate } from 'react-router-dom';
import { tokens } from "../../theme";
import { AuthContext } from "../../AuthContext";


const Login = () => {
  const { login } = useContext(AuthContext);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post('http://localhost:5000/api/login', {
        email,
        password,
      });

      // Save the session token or user information in local storage or state management
      // sessionStorage.setItem('token', response.data.session_token);
      // console.log(response.data.session_token);

      // Redirect to the dashboard
      navigate('/dashboard');
    } catch (error) {
      setError('Invalid email or password');
    }
  };

  return (
    <Box
    m="20px"
    justifyContent="center"
    alignItems="center"    
    >
    <Header title="Login" subtitle="" />
      <Box width="300px" p={2}>
        <form onSubmit={handleFormSubmit}>
          <Box mb={2}>
            <TextField
              type="email"
              label="Email"
              fullWidth
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </Box>
          <Box mb={2}>
            <TextField
              type="password"
              label="Password"
              fullWidth
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </Box>
          <Button type="submit" variant="contained" fullWidth>
            Login
          </Button>
          {error && (
            <Box mt={2}>
              <Alert severity="error">{error}</Alert>
            </Box>
          )}
        </form>
      </Box>
    </Box>
  );
};

export default Login;

import React, { createContext, useContext, useState } from 'react';
import { useNavigate  } from 'react-router-dom';

export const AuthContext = createContext();

const AuthProvider = ({ children }) => {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);

  const login = async (email, password) => {
    try {
      // Send login request to the backend and handle the response
      // Upon successful login, set the user data and redirect to the dashboard
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      if (response.ok) {
        const data = await response.json();
        setUser(data.user);
        localStorage.setItem('access_token', data.access_token);
        navigate('/dashboard');
      } else {
        // Handle login error
        console.log('Login failed');
      }
    } catch (error) {
      console.log(error);
    }
  };

  const logout = () => {
    // Clear user data and access token from localStorage
    setUser(null);
    localStorage.removeItem('access_token');
    navigate('/login');
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;

import React, { useContext } from 'react';
import { Route, Navigate } from 'react-router-dom';
import { AuthContext } from './AuthContext';

const PrivateRoute = ({ component: Component, ...rest }) => {
  const { user } = useContext(AuthContext);

  if (!user) {
    return <Navigate to="/login" />; // Redirect to login if user is not authenticated
  }

  return <Route {...rest} element={<Component />} />;
};

export default PrivateRoute;
