Remarks Pulp:
wenn für die gesamte Woche nichts eingetragen ist bedeutet es komplette flexibilität
Filtern nach Company, Department
Was ist mit Springern, die verschiedene Tätigkeiten übernehmen?


Nebenbedingungen:
Nicht-Negativitätsbedingung
    x = LpVariable("x", lowBound=0)
Max. Wochenpensum (Wochenpensum über 2 Wochen? Arbeitsrecht anschauen)
Feste MA priorisieren - volles pensum ist zwingend - evtl Zuteilung als erstes, dann sit rest nicht mehr optimal
Planung immer am stück min. X Stunden
Doppelte Verfügbarkeit pro Tag als neue Planung ansehen
Max Arbeitsstunden pro Tag nicht überschreiten

# Constraint only allows solutions where the max planned summed hour is 50
        constraint_expr = solver.Sum(x[i, j, k] for j in range(7) for k in range(len(verfügbarkeit[i][j])))
        constraint = solver.Constraint(0, 50)  # Constraint: <= 50
        constraint.SetCoefficient(constraint_expr, 1) # Sum * Coefficient of 1

        # Constraint makes sure that the user works at least 3 hours in a row
        for i in mitarbeiter:
            for j in range(7):
                for k in range(len(verfügbarkeit[i][j]) - 2):
                    constraint_expr = solver.Sum(x[i, j, k + n] for n in range(3))
                    constraint = solver.Constraint(1, solver.infinity())  # Constraint: >= 1 with infinity hours needs to be maxed
                    constraint.SetCoefficient(constraint_expr, 1)


 # Constraint makes sure that the user works at least 3 hours in a row - doesn't work yet
        for i in mitarbeiter:
            for j in range(7):
                for k in range(len(verfügbarkeit[i][j]) - 3):
                    # Check if the Mitarbeiter is planned at the current hour and the next 2 hours
                    is_planned = [x[i, j, k + n] for n in range(4)]
                    # Add a constraint to ensure at least one of the tree hours is planned
                    solver.Add(solver.Sum(is_planned) >= 3)


# Check for Solver Execution

        for i in range(len(mitarbeiter)):
            if employment[i] == "Perm": 
                sum_availability_perm = 0
                for j in range(calc_time):
                    for k in range(len(verfügbarkeit[i][j])):
                        sum_availability_perm += verfügbarkeit[i][j][k]
                        print(sum_availability_perm)           
                if sum_availability_perm <= working_h:
                    print(mitarbeiter[i], " has not planned enough hours.")
                else:
                    pass